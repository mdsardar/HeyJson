
import java.util.Iterator;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Map;
import com.citigroup.amlcdd.audittrail.service.ICddAuditLogService;
import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.entity.BranchEntity;
import com.citigroup.amlcdd.entity.EmailUserEntity;
import com.citigroup.amlcdd.entity.InboxEntity;
import com.citigroup.amlcdd.entity.InboxTotalEntity;
import com.citigroup.amlcdd.entity.UserDetailsEntity;
import com.citigroup.amlcdd.framework.notification.email.vo.EmailUserVO;
import com.citigroup.amlcdd.framework.service.AmlCddCacheUtil;
import com.citigroup.amlcdd.inbox.dao.IInboxDao;
import com.citigroup.amlcdd.inbox.vo.InboxRequestVo;
import com.citigroup.amlcdd.login.dao.CDDUserDetailsDao;
import com.citigroup.amlcdd.login.dao.IUserDao;
import com.citigroup.amlcdd.search.dao.IBranchDao;
import com.citigroup.amlcdd.search.dao.IUserRoleScopeDao;

@Service
public class InboxServiceImpl implements IInboxService{
	@Autowired
	private IInboxDao inboxDao;
	@Autowired
	private IBranchDao branchDao;
	@Autowired
	private AmlCddCacheUtil amlCddCacheUtil;
	
	@Autowired
	private IUserRoleScopeDao userRoleScopeDao;
	@Autowired
	IUserDao userDao;
	
	@Autowired
	private CDDUserDetailsDao CDDUserDetailsDao;
	
	@Autowired
	private ICddAuditLogService cddAuditLogService;
	/**
	 * Get the CDD/KYC UnAssigned Workitems.
	 */
	public List<InboxEntity> getUnAssignedDetails(InboxRequestVo nboxRequestVo,String roCode){
		nboxRequestVo.setPageCount(getPageCount());
		return inboxDao.getUnAssignedDetails(nboxRequestVo,roCode);
	}
	public String getRoleCoe(String loginUserId){
		String roCode = userRoleScopeDao.getRoleCoe(loginUserId);
		return roCode;
	}
	/**
	 * Get The Assigned Work Items
	 */
	public List<InboxEntity> getAssignedDetails(InboxRequestVo nboxRequestVo){
		nboxRequestVo.setPageCount(getPageCount());
		return inboxDao.getAssignedDetails(nboxRequestVo);
	}
	public int getPageCount(){
		int count=0;
		if(amlCddCacheUtil != null){
			String pageCount = amlCddCacheUtil.getAppConfig(AMLCDDConstants.PAGE_COUNT);
			if(pageCount != null && pageCount !=""){
				count=Integer.valueOf(pageCount);
			}else{
				count=AMLCDDConstants.PAGE_COUNT_VALUE;
			}
		}
		return count;
	}
	/**
	 * Get the unassigned work Items Count
	 * @return
	 */
	public List<InboxTotalEntity> getUnAssignedTotalRecords(InboxRequestVo nboxRequestVo,String roCode){
		return inboxDao.getUnAssignedTotalRecords(nboxRequestVo, roCode);
	}
	/**
	 * Get the assigned work Items Count
	 * @return
	 */
	public List<InboxTotalEntity> getAssignedTotalRecords(InboxRequestVo nboxRequestVo){
		return inboxDao.getAssignedTotalRecords(nboxRequestVo);
	}
	/**
	 * Get the Branch details
	 */
	public List<BranchEntity>  getBranchDetails(){
		return branchDao.getBranchDetails();
	}
	/**
	 * Get The User Details
	 * @param branchCode
	 * @return
	 */
	public List<UserDetailsEntity> getUsrDetails(String branchCode,List<String> businessRole,String userId){
		return userDao.getUsrDetails(branchCode,businessRole,userId);
	}
	public List<UserDetailsEntity> getAllUsersForInbox(List<String> businessRole,String userId,List<String> selectedControlNumber){
		return userDao.getAllUsersForInbox(businessRole,userId,selectedControlNumber);
	}
	/**
	 * Get the Assign and ReAssign Details
	 */
	public List<EmailUserEntity> getAssignAndResignUserDetails(String roleId,String customerNbr){
		List<EmailUserEntity> emailUserEntities = CDDUserDetailsDao.getUsersForSysRoleID(roleId,customerNbr);
		return emailUserEntities;
	}
	
	public EmailUserVO getEmailIdForUser(String userId){
		return CDDUserDetailsDao.getEmailUserByUserId(userId);
	}
	
	/**
	 * to Load Branch Details
	 */
	public List<BranchEntity> getBranchDetails(List<String> selectedControlNumber,String userId){
		return inboxDao.getBranchDetails(selectedControlNumber,userId);
	}
	/**
	 * Get The Count for Business Role
	 */
	public int getCountForBusinessRole(String businessRole){
		return inboxDao.getCountForBusinessRole(businessRole);
	}
	/**
	 * Get The Mapped Branch List For the User
	 * @param userId
	 * @param countryCode
	 * @return
	 */
	public List<String> getMappedBranchForUser(String userId){
		return inboxDao.getMappedBranchForUser(userId);
	}
	/**
	 * Get the Relationship officer.
	 * @param selectedControlNumber
	 * @return
	 */
	public List<String> getRelationshipOff(List<String> selectedControlNumber,String userId){
		return inboxDao.getRelationshipOff(selectedControlNumber,userId);
	}
	/**
	 * Get Ro COde
	 * @param userId
	 * @param countryCode
	 * @return
	 */
	public List<String> getRoCode(String userId){
		return inboxDao.getRoCode(userId);
	}
	/**
	 * Get The Email ids 
	 */
	public List<String> getEmailId(String assignerUserId,String assigneeUserId){
		return inboxDao.getEmailId(assignerUserId, assigneeUserId);
	}
	/**
	 * 
	 */
	public void saveAuditLog(InboxRequestVo inboxVo){
		cddAuditLogService.saveCddAuditLog(inboxVo);
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.inbox.service.IInboxService#getParameterDetails(com.citigroup.amlcdd.inbox.vo.InboxRequestVo)
	 */
	@Override
	public List<InboxRequestVo> getParameterDetails(InboxRequestVo nboxRequestVo) {
		
		return inboxDao.getParameterDetails(nboxRequestVo);
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.inbox.service.IInboxService#getParameterDetailsCount()
	 */
	@Override
	public int getParameterDetailsCount() {
		// TODO Auto-generated method stub
		return inboxDao.getParameterDetailsCount();
	}
	@Override
	public Boolean getCustBranchDetails(String custNumber,String userId) {
		List<BranchEntity> branchList = inboxDao.getCustBranchDetails(custNumber);
		List<String> mappedBranchForUserList = getMappedBranchForUser(userId);
		Boolean chkFlg = true;
		Iterator iterator = branchList.iterator();
		while (iterator.hasNext()) {
			BranchEntity branchObj = (BranchEntity) iterator.next();
			if (!mappedBranchForUserList.contains(branchObj.getBrnchCode())) {
					chkFlg = false;
				}
		}
		return chkFlg;
	}
	@Override
	public Boolean getCustRelationshipOff(String custNumber,String userId) {
		Boolean chkFlg = true;
		List<String> relationOfficerList = inboxDao.getCustRelationshipOff(custNumber);
		List<String> roCodeList = getRoCode(userId);
		Iterator  iterator = relationOfficerList.iterator();
		while (iterator.hasNext()) {
			String relationshipOfficer = (String) iterator.next();
			if (!roCodeList.contains(relationshipOfficer)) {
				chkFlg = false;
			}
		}
		return chkFlg;
	}
	
	@Override
	public List<String> getParameterAssigneeInfo(List<String> pickListIdLst) {
		// TODO Auto-generated method stub
		return inboxDao.getParameterAssigneeInfo(pickListIdLst);
	}
	
	@Override
	public Map<String, String> getParameterAssigneeInfoUnClaim(List<String> pickListIdLst) {
		// TODO Auto-generated method stub
		return inboxDao.getParameterAssigneeInfoUnClaim(pickListIdLst);
	}
}
