package com.chutty.amlcdd.inbox.dao;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.lang3.math.NumberUtils;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.slf4j.Logger;
import org.springframework.stereotype.Repository;

import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.entity.BranchEntity;
import com.citigroup.amlcdd.entity.InboxEntity;
import com.citigroup.amlcdd.entity.InboxTotalEntity;
import com.citigroup.amlcdd.framework.dao.CDDBaseDaoImpl;
import com.citigroup.amlcdd.framework.util.CommonUtility;
import com.citigroup.amlcdd.inbox.vo.InboxRequestVo;

@Repository
public class InboxDaoImpl extends CDDBaseDaoImpl implements IInboxDao{
	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(InboxDaoImpl.class);
	private static final String BASE="SELECT '' COMBOVAL,KMAIN.CUSTOMER_NBR CUSTNO,CUST.CUSTOMER_NAME CUSTNAME,KMAIN.CONTROL_NBR CONTROLNO,KMAIN.TRIGGER_TYPE TRIGERTYP,(SELECT PICK_LIST_DESCR FROM PICK_LIST_LKUP WHERE PICK_LIST_TYPE='CDD_CLIENT_TYPE' AND PICK_LIST_CODE  =CUST.CLIENT_TYPE) CLINTYP,(SELECT PICK_LIST_DESCR FROM PICK_LIST_LKUP WHERE PICK_LIST_TYPE='BUSINESS_LINE' AND PICK_LIST_CODE  =CUST.BUSINESS_LINE) BUSLINE,KMAIN.STATUS CDDSTATUS,TO_CHAR(KMAIN.TRIGGERED_DATE,\'"+AMLCDDConstants.DATE_FORMAT_MMDDYYYY +"\') TRIGERDATE"
												+ ",(SELECT PICK_LIST_DESCR FROM PICK_LIST_LKUP WHERE PICK_LIST_TYPE='RISK_RATING' AND PICK_LIST_CODE=CUST.FORMS_RISK) CDDRISK,KMAIN.CDD_OR_KYC_REFRESH WRKITMTYP,(SELECT UR.NAME FROM QSFW_SMS_USER UR WHERE UR.USER_ID=TASK.WORK_ITEM_ASSIGNEE) ASIGNTO,TO_CHAR(TASK.WORK_ITEM_ASSIGNED_DATE,\'"+AMLCDDConstants.DATE_FORMAT_MMDDYYYY +"\') ASIGNDATE,TASK.WORK_ITEM_ASSIGNEE CDDASSIGUSER "
												+ "  FROM KYC_MAIN KMAIN,KYC_CUSTOMER_DETAILS CUST,KYC_TASK TASK "
												+ "	 WHERE CUST.CONTROL_NBR=KMAIN.CONTROL_NBR AND CUST.CUSTOMER_NBR =KMAIN.CUSTOMER_NBR AND CUST.CNTRY_CDE = KMAIN.CNTRY_CDE AND TASK.COMPONENT_ID = KMAIN.CONTROL_NBR AND TASK.COMPONENT_ID = CUST.CONTROL_NBR ";
	private static final String USER_ROLE="AND upper(TASK.TASK_ROLE)=upper(:userRole) ";
	
	private static final String UN_ASSIGNED_WRKFLOW_MKR_STATUS=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:ready)) ORDER BY KMAIN.TRIGGERED_DATE DESC ";
	private static final String UN_ASSIGNED_WRKFLOW_CHKR_STATUS=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:ready)) ORDER BY KMAIN.TRIGGERED_DATE DESC ";
	private static final String UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:ready)) ORDER BY KMAIN.TRIGGERED_DATE DESC ";
	
	private static final String UN_ASSIGNED_WRKFLOW_MKR_STATUS_CUSTSEARCH=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:ready)) ";
	private static final String UN_ASSIGNED_WRKFLOW_CHKR_STATUS_CUSTSEARCH=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:ready)) ";
	private static final String UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS_CUSTSEARCH=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:ready)) ";
	
	
	private static final String ASSIGNED_WRKFLOW_STATUS=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:reserved)) AND upper(TASK.WORK_ITEM_ASSIGNEE)=upper(:assigneeUser) ORDER BY KMAIN.TRIGGERED_DATE DESC ";
	private static final String ASSIGNED_WRKFLOW_STATUS_CUSTSEARCH=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:reserved)) AND upper(TASK.WORK_ITEM_ASSIGNEE)=upper(:assigneeUser) ";
	
	private static final String ASSIGNED_WRKFLOW_STATUS_ADMIN=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:reserved)) ORDER BY KMAIN.TRIGGERED_DATE DESC ";
	private static final String ASSIGNED_WRKFLOW_STATUS_CUSTSEARCH_ADMIN=" AND upper(TASK.WORK_ITEM_STATUS) IN (upper(:reserved)) ";
	
	private static final String COUNTRY=" AND KMAIN.CNTRY_CDE=:countryCode ";
	private static final String RO_BRANCH=" AND CUST.CUST_BRANCH IN (SELECT PH.BRANCH_CODE FROM QSFW_SMS_USER_BRANCH_MAP PH,QSFW_SMS_USER_ROLE_MAP PH1 WHERE PH.USER_ID=:userId) AND KMAIN.CNTRY_CDE=:countryCode ";
	private static final String RO_ALL=" AND CUST.CNTRY_CDE =:countryCode ";
	private static final String LINEOFBUSINESS=" AND CUST.BUSINESS_LINE =";
	private static final String BASE_TOTAL="SELECT COUNT(1) TOTALREC "
															+ " FROM KYC_MAIN KMAIN,KYC_CUSTOMER_DETAILS CUST,KYC_TASK TASK "
															+ " WHERE CUST.CONTROL_NBR=KMAIN.CONTROL_NBR AND CUST.CUSTOMER_NBR =KMAIN.CUSTOMER_NBR AND CUST.CNTRY_CDE = KMAIN.CNTRY_CDE AND TASK.COMPONENT_ID = KMAIN.CONTROL_NBR AND TASK.COMPONENT_ID = KMAIN.CONTROL_NBR ";
	private static final String LOAD_BRANCH="SELECT DISTINCT CUST.CUST_BRANCH BRCODE,BRN.BRANCH_DESC BRDESC FROM KYC_CUSTOMER_DETAILS CUST,AML_BRANCH_MASTER BRN WHERE BRN.BRANCH_CODE=CUST.CUST_BRANCH AND CUST.CONTROL_NBR IN (:selectedControlNbr)";
	private static final String VALIDATE_CUST_BRANCH="SELECT DISTINCT CUST.CUST_BRANCH BRCODE,BRN.BRANCH_DESC BRDESC FROM KYC_CUSTOMER_DETAILS CUST,AML_BRANCH_MASTER BRN WHERE BRN.BRANCH_CODE=CUST.CUST_BRANCH AND CUST.CUSTOMER_NBR = :selectedCustomerNbr";
	private static final String GET_COUNT_FOR_BUSINESS_ROLE="SELECT COUNT(1) FROM QSFW_SMS_SYSTEM_BUSI_ROLE_MAP BUSRO,QSFW_SMS_ROLE_ROCODE_SCOPE ROCODE WHERE ROCODE.ROLE_ID =BUSRO.BUS_ROLE_ID AND ROCODE.ROCODE_SCOPE='ALL' AND BUSRO.SYS_ROLE_ID=:businessRoleId";
	
	private static final String GET_MAPPED_BRANCH_FOR_USER="SELECT DISTINCT PH.BRANCH_CODE FROM QSFW_SMS_USER_BRANCH_MAP PH,QSFW_SMS_USER_ROLE_MAP PH1,QSFW_SMS_USER_COUNTRY_MAP COU WHERE PH.USER_ID =PH1.USER_ID AND PH.CNTRY_CDE = COU.CNTRY_CDE AND PH.USER_ID=COU.USER_ID AND PH.USER_ID =:userId";
	
	private static final String GET_RELATIONSHIP_OFFICER="SELECT DISTINCT CUST.CUST_REL_OFF FROM KYC_CUSTOMER_DETAILS CUST,AML_BRANCH_MASTER BRN WHERE BRN.BRANCH_CODE=CUST.CUST_BRANCH AND CUST.CONTROL_NBR IN (:selectedControlNbr)";
	private static final String GET_CUST_RELATIONSHIP_OFFICER="SELECT DISTINCT CUST.CUST_REL_OFF FROM KYC_CUSTOMER_DETAILS CUST,AML_BRANCH_MASTER BRN WHERE BRN.BRANCH_CODE=CUST.CUST_BRANCH AND CUST.CUSTOMER_NBR = :selectedCustomerNbr";
	private static final String GET_ROCODE="SELECT RO_CODE FROM QSFW_USER_ROCODE_MAP ROCODE,QSFW_SMS_USER_COUNTRY_MAP COU WHERE COU.CNTRY_CDE=ROCODE.CNTRY_CDE AND COU.USER_ID=ROCODE.USER_ID AND ROCODE.USER_ID=:userId";
	
	private static final String GET_EMAIL="SELECT US.EMAIL FROM QSFW_SMS_USER US WHERE UPPER(US.USER_ID) IN (UPPER(:assignerUserId),UPPER(:assigneeUserId))";
	
	private static final String CUSTNO_SEARCH=" AND CUST.CUSTOMER_NBR=:customerNumber ORDER BY KMAIN.TRIGGERED_DATE DESC ";
	private static final String PARAM_SEARCH1 =" SELECT  '' COMBOVAL,CAST(PLIST.PICK_LIST_ID as VARCHAR2(36 BYTE)) AS PARAMID,PLIST.PICK_LIST_TYPE AS PARAMNAME,TASK.WORK_ITEM_TYPE AS PARAMTYPE,PLIST.AUTH_status AS AUTHSTATUS, PLIST.created_by AS CREATED_BY, TO_CHAR(TASK.WORK_ITEM_CREATION_DATE,\'"+ AMLCDDConstants.DATE_FORMAT_MMDDYYYY + "\') ASIGNDATE,TASK.WORK_ITEM_ASSIGNEE AS ASSIGNEETO ,(SELECT UR.NAME FROM QSFW_SMS_USER UR WHERE upper(UR.USER_ID)=upper(TASK.WORK_ITEM_ASSIGNEE)) AS ASIGNTO   FROM PICK_LIST_LKUP_STG PLIST, KYC_TASK TASK WHERE TASK.COMPONENT_ID = CAST(PLIST.PICK_LIST_ID AS VARCHAR(20)) AND PLIST.PICK_LIST_TYPE <> 'CASA_BLOCK_REASON_CODE' AND upper(TASK.WORK_ITEM_STATUS) IN (upper('READY'),upper('RESERVED'))";
	private static final String PARAM_SEARCH2 =" UNION Select '' COMBOVAL, STA.SINGLE_TOUCH_ID AS PARAMID, (STA.CLIENT_TYPE ||'-'|| STA.RISK_RATING) AS PARAMNAME, TASK.WORK_ITEM_TYPE AS PARAMTYPE, STA.AUTH_STATUS AS AUTHSTATUS, STA.CREATED_BY AS CREATED_BY, TO_CHAR(TASK.WORK_ITEM_CREATION_DATE,\'"+ AMLCDDConstants.DATE_FORMAT_MMDDYYYY + "\') ASIGNDATE,TASK.WORK_ITEM_ASSIGNEE AS ASSIGNEETO ,(SELECT UR.NAME FROM QSFW_SMS_USER UR WHERE upper(UR.USER_ID)=upper(TASK.WORK_ITEM_ASSIGNEE)) AS ASIGNTO  FROM CDD_SINGE_TOUCH_CONFIG_STG STA, KYC_TASK TASK WHERE TASK.COMPONENT_ID = STA.SINGLE_TOUCH_ID AND upper(TASK.WORK_ITEM_STATUS) IN (upper('READY'),upper('RESERVED'))";
	private static final String PARAM_SEARCH3 =" UNION SELECT '' COMBOVAL, STG.CONFIG_ID AS PARAMID, STG.ATTR_CODE  AS PARAMNAME, TASK.WORK_ITEM_TYPE AS PARAMTYPE,STG.AUTH_STATUS AS AUTHSTATUS, STG.CREATED_BY AS CREATED_BY, TO_CHAR(TASK.WORK_ITEM_CREATION_DATE,\'"+ AMLCDDConstants.DATE_FORMAT_MMDDYYYY + "\') ASIGNDATE,TASK.WORK_ITEM_ASSIGNEE AS ASSIGNEETO ,(SELECT UR.NAME FROM QSFW_SMS_USER UR WHERE upper(UR.USER_ID)=upper(TASK.WORK_ITEM_ASSIGNEE)) AS ASIGNTO  FROM  AML_CDD_CONFIG_ATTR_STG STG, KYC_TASK TASK WHERE TASK.COMPONENT_ID = STG.CONFIG_ID AND upper(TASK.WORK_ITEM_STATUS) IN (upper('READY'),upper('RESERVED'))";

	private static final String SEGMENT=" AND CUST.CUST_SEGMENT IN (SELECT SEGMAP.SEGMENT_CODE FROM QSFW_SMS_USER_ROLE_MAP USRMAP,QSFW_SMS_OSCARROLE_SEGMENT_MAP SEGMAP WHERE USRMAP.ROLE_ID=SEGMAP.ROLE_ID AND USRMAP.CNTRY_CDE =SEGMAP.CNTRY_CDE AND UPPER(USER_ID)=UPPER(:userId)) ";
	
	private static final String ASSIGNEE_TO_LIST="SELECT TASK.COMPONENT_ID FROM KYC_TASK TASK WHERE  upper(TASK.WORK_ITEM_STATUS)=upper('RESERVED')  AND TASK.COMPONENT_ID IN(:paramIdLst)";
	
	private static final String ASSIGNEE_TO_LIST_UNCLAIM="SELECT TASK.COMPONENT_ID,TASK.WORK_ITEM_ASSIGNEE FROM KYC_TASK TASK WHERE  upper(TASK.WORK_ITEM_STATUS)=upper('RESERVED')  AND TASK.COMPONENT_ID IN(:paramIdLst)";
	/**
	 * Get The Email id Based on the user id
	 */
	public List<String> getEmailId(String assignerUserId,String assigneeUserId){
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(GET_EMAIL).setParameter("assignerUserId",assignerUserId)
																		 .setParameter("assignerUserId",assignerUserId);
		List<String> emilIds =query.list(); 
		return emilIds;
	}
	/**
	 * Get the Relationship officer from kyc_customer Table.
	 * @param selectedControlNumber
	 * @return
	 */
	public List<String> getRelationshipOff(List<String> selectedControlNumber,String userId){
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(GET_RELATIONSHIP_OFFICER+SEGMENT)
											   .setParameterList("selectedControlNbr", selectedControlNumber)
											   .setParameter("userId",userId);
		List<String> relationshipOffList =query.list(); 
		return relationshipOffList;
	}
	/**
	 * Get the Ro Code From Master Table.
	 */
	public List<String> getRoCode(String userId){
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(GET_ROCODE).setParameter("userId",userId);
		List<String> roCodeList=query.list();
		return roCodeList;
	}
	/**
	 * Get the Mappend Branch for the User
	 */
	public List<String> getMappedBranchForUser(String userId){
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(GET_MAPPED_BRANCH_FOR_USER).setParameter("userId",userId);
		List<String> mappedBranchList=query.list();
		return mappedBranchList;
	}
	/**
	 * Get The Count for Business Role
	 */
	public int getCountForBusinessRole(String businessRole){
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(GET_COUNT_FOR_BUSINESS_ROLE).setParameter("businessRoleId", businessRole);
		BigDecimal countForBusinessRole=(BigDecimal) query.uniqueResult();
		return countForBusinessRole.intValue();
	}
	
	/**
	 * Get the UnAssigned Work Items
	 */
	
	public List<InboxEntity> getUnAssignedDetails(InboxRequestVo inboxRequestVo,String roCode){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getInboxMakerCheckerComplianceDetails ");
		SQLQuery query =null;
		List<InboxEntity> listOfInboxEntity =null;
		String queryString=BASE;
		query=getUnAssignedUser(inboxRequestVo,query,roCode,queryString);
		if(query != null){
			listOfInboxEntity = getWorkItems(inboxRequestVo, query);
		}
		return listOfInboxEntity;
	}
	public List<InboxEntity> getWorkItems(InboxRequestVo inboxRequestVo,SQLQuery query){
		int pageNo = (inboxRequestVo.getPageNo() -1) * inboxRequestVo.getPageCount();
		query.setFirstResult(pageNo);
		query.setMaxResults(inboxRequestVo.getPageCount());
		return query.list();
	}
	/**
	 * Get The Assigned work Items
	 */
	public List<InboxEntity> getAssignedDetails(InboxRequestVo inboxRequestVo){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getInboxMakerCheckerComplianceDetails ");
		SQLQuery query =null;
		String queryString=BASE;
		query=getAssignedUser(inboxRequestVo,query,queryString);
		return getWorkItems(inboxRequestVo, query);
	}
	/**
	 * Get The Assigned User
	 */
	public SQLQuery getAssignedUser(InboxRequestVo inboxRequestVo,SQLQuery query,String queryString){
			logger.info("Inside the Class: InboxDaoImpl ---> method: getAssignedUser ");
			if(!"ALL".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && !"".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && inboxRequestVo.getBusinessLine() != null){
				queryString=queryString+LINEOFBUSINESS+"'"+inboxRequestVo.getBusinessLine()+"'";
				query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class);
			}
			if(inboxRequestVo.getIsAdmin() == false){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole())
													  .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee()).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
					}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole())
								                      .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee()).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
					}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													 .setParameter("userRole", inboxRequestVo.getUserRole())
								                     .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee()).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
					}
				}else{
					queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS;
					if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole())
													  .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee());
					}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole())
								                      .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee());
					}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													 .setParameter("userRole", inboxRequestVo.getUserRole())
								                     .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee());
					}
				}
			}else if(inboxRequestVo.getIsAdmin() == true){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS_CUSTSEARCH_ADMIN+CUSTNO_SEARCH;
					if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole())
													  .setParameter("reserved","reserved").setParameter("customerNumber", inboxRequestVo.getCustomerNo());
					}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole())
								                      .setParameter("reserved","reserved").setParameter("customerNumber", inboxRequestVo.getCustomerNo());
					}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													 .setParameter("userRole", inboxRequestVo.getUserRole())
								                     .setParameter("reserved","reserved").setParameter("customerNumber", inboxRequestVo.getCustomerNo());
					}
				}else{
					queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS_ADMIN;
					if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved");
					}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved");
					}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
						query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
													 .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved");
					}
				}
			}
			
		return query;
	}

	/*
	 * (non-Javadoc)
	 * @see com.citigroup.amlcdd.inbox.dao.IInboxDao#getUnAssignedUser(com.citigroup.amlcdd.inbox.vo.InboxRequestVo)
	 */
	public SQLQuery getUnAssignedUser(InboxRequestVo inboxRequestVo,SQLQuery query,String roleScope,String queryString){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getUnAssignedUser ");
		queryString=queryString;
		if(!"ALL".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && !"".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && inboxRequestVo.getBusinessLine() != null){
			queryString=queryString+LINEOFBUSINESS+"'"+inboxRequestVo.getBusinessLine()+"'";
			query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class);
		}
		if(AMLCDDConstants.ROLE_SCOPE_BRANCH.equalsIgnoreCase(roleScope)){
			queryString=queryString+RO_BRANCH+SEGMENT;
			if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole", inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole", inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}
			
		}else if(AMLCDDConstants.ROLE_SCOPE_ALL.equalsIgnoreCase(roleScope)){
			queryString=queryString+RO_ALL+SEGMENT;
			if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class)
							.setParameter("userId",inboxRequestVo.getUserId())
							.setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class)
							.setParameter("userId",inboxRequestVo.getUserId())
							.setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
				
			}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							    .setParameter("userId",inboxRequestVo.getUserId())
								.setParameter("userRole",inboxRequestVo.getUserRole())
							    .setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
								.setParameter("userId",inboxRequestVo.getUserId())
								.setParameter("userRole",inboxRequestVo.getUserRole())
							    .setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
				
			}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
								.setParameter("userId",inboxRequestVo.getUserId())
								.setParameter("userRole",inboxRequestVo.getUserRole())
								.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
								.setParameter("userId",inboxRequestVo.getUserId())
								.setParameter("userRole",inboxRequestVo.getUserRole())
								.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}
		}
		return query;
	}
	
	/**
	 * Get The Total Records for Unassigned.
	 * @param inboxRequestVo
	 * @param roCode
	 * @return
	 */
	public List<InboxTotalEntity> getUnAssignedTotalRecords(InboxRequestVo inboxRequestVo,String roCode){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getUnAssignedTotalRecords ");
		SQLQuery query =null;
		int countRecords = 0;
		String queryString=BASE_TOTAL;//+SEGMENT+" AND PH.USER_ID='"+inboxRequestVo.getUserId()+"')";;
		query=getUnAssignedUserTotal(inboxRequestVo,query,roCode,queryString);
		return query.list();
	}
	
	/**
	 * Get The Total Records for Unassigned Total Count.
	 * @param inboxRequestVo
	 * @param roCode
	 * @return
	 */
	public List<InboxTotalEntity> getAssignedTotalRecords(InboxRequestVo inboxRequestVo){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getAssignedTotalRecords ");
		SQLQuery query =null;
		int countRecords = 0;
		String queryString=BASE_TOTAL;//+SEGMENT+" AND PH.USER_ID='"+inboxRequestVo.getUserId()+"')";;
		query=getAssignedUserTotal(inboxRequestVo,query,queryString);
		return query.list();
	}
	public List<BranchEntity> getBranchDetails(List<String> selectedControlNumber,String userId){
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(LOAD_BRANCH+SEGMENT).addEntity(BranchEntity.class)
											   .setParameterList("selectedControlNbr",selectedControlNumber)
											   .setParameter("userId",userId);
		List<BranchEntity> branchList =query.list(); 
		return branchList;
	}
	/**
	 * get The TotalRecords for UnAssigned
	 */
	/*
	 * (non-Javadoc)
	 * @see com.citigroup.amlcdd.inbox.dao.IInboxDao#getUnAssignedUser(com.citigroup.amlcdd.inbox.vo.InboxRequestVo)
	 */
	public SQLQuery getUnAssignedUserTotal(InboxRequestVo inboxRequestVo,SQLQuery query,String roleScope,String queryString){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getUnAssignedUser ");
		if(!"ALL".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && !"".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && inboxRequestVo.getBusinessLine() != null){
			queryString=queryString+LINEOFBUSINESS+"'"+inboxRequestVo.getBusinessLine()+"'";
			query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxEntity.class);
		}
		if(AMLCDDConstants.ROLE_SCOPE_BRANCH.equalsIgnoreCase(roleScope)){
			queryString=queryString+RO_BRANCH+SEGMENT;
			if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole", inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole", inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("userId",inboxRequestVo.getUserId()).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}
			
		}else if(AMLCDDConstants.ROLE_SCOPE_ALL.equalsIgnoreCase(roleScope)){
			queryString=queryString+RO_ALL+SEGMENT;
			if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter("userId",inboxRequestVo.getUserId())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_MKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							.setParameter("userRole",inboxRequestVo.getUserRole())
							.setParameter("userId",inboxRequestVo.getUserId())
							.setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
				
			}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							   .setParameter("userRole",inboxRequestVo.getUserRole())
							   .setParameter("userId",inboxRequestVo.getUserId())
							   .setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_CHKR_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							   .setParameter("userRole",inboxRequestVo.getUserRole())
							   .setParameter("userId",inboxRequestVo.getUserId())
							   .setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
				
			}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
				if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							   .setParameter("userRole",inboxRequestVo.getUserRole())
							   .setParameter("userId",inboxRequestVo.getUserId())
							   .setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else{
					queryString =queryString+USER_ROLE+UN_ASSIGNED_WRKFLOW_COMPLINCE_STATUS;
					query = (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
							   .setParameter("userRole",inboxRequestVo.getUserRole())
							   .setParameter("userId",inboxRequestVo.getUserId())
							   .setParameter(AMLCDDConstants.READY, AMLCDDConstants.READY);
				}
			}
		}
		return query;
	}
	
	/**
	 * Get The Assigned Record Count
	 */
	public SQLQuery getAssignedUserTotal(InboxRequestVo inboxRequestVo,SQLQuery query,String queryString){
		logger.info("Inside the Class: InboxDaoImpl ---> method: getAssignedUser ");
		if(!"ALL".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && !"".equalsIgnoreCase(inboxRequestVo.getBusinessLine()) && inboxRequestVo.getBusinessLine() != null){
			queryString=queryString+LINEOFBUSINESS+"'"+inboxRequestVo.getBusinessLine()+"'";
			query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class);
		}
		if(inboxRequestVo.getIsAdmin() == false){
			if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
				queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS_CUSTSEARCH+CUSTNO_SEARCH;
				if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole())
												  .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee()).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole())
							                      .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee()).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												 .setParameter("userRole", inboxRequestVo.getUserRole())
							                     .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee()).setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}
			}else{
				queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS;
				if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole())
												  .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee());
				}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole())
							                      .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee());
				}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												 .setParameter("userRole", inboxRequestVo.getUserRole())
							                     .setParameter("reserved","reserved").setParameter("assigneeUser",inboxRequestVo.getWorkItemAssignee());
				}
			}
		}else if(inboxRequestVo.getIsAdmin() == true){
			if(null != inboxRequestVo.getCustomerNo() && !"".equalsIgnoreCase(inboxRequestVo.getCustomerNo())){
				queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS_CUSTSEARCH_ADMIN+CUSTNO_SEARCH;
				if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved").setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved").setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												 .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved").setParameter("customerNumber", inboxRequestVo.getCustomerNo());
				}
			}else{
				queryString=queryString+COUNTRY+USER_ROLE+ASSIGNED_WRKFLOW_STATUS_ADMIN;
				if(AMLCDDConstants.MAKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved");
				}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved");
				}else if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxRequestVo.getRole())){
					query= (SQLQuery) getSession().createSQLQuery(queryString).addEntity(InboxTotalEntity.class).setParameter("countryCode",inboxRequestVo.getCountryCode())
												  .setParameter("userRole", inboxRequestVo.getUserRole()).setParameter("reserved","reserved");
				}
			}
		}
	return query;
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.inbox.dao.IInboxDao#getParameterDetails(com.citigroup.amlcdd.inbox.vo.InboxRequestVo)
	 */
	@Override
	public List<InboxRequestVo> getParameterDetails(InboxRequestVo inboxRequestVo) {
		logger.info("Inside the Class: InboxDaoImpl ---> method: getParameterDetails ");
		SQLQuery query =null;
		int countRecords = 0;
		List<InboxRequestVo> paramVoList = new ArrayList();		

		String queryString=PARAM_SEARCH1;
		//queryString
		if(null != inboxRequestVo.getUserRole() && !"".equalsIgnoreCase(inboxRequestVo.getUserRole())){
			queryString=queryString+" AND TASK.TASK_ROLE = "+"'"+inboxRequestVo.getUserRole()+"'";
		}
		if(!"ALL".equalsIgnoreCase(inboxRequestVo.getParameterType()) && !"".equalsIgnoreCase(inboxRequestVo.getParameterType()) && inboxRequestVo.getParameterType() != null){
			queryString=queryString+" AND TASK.WORK_ITEM_TYPE = "+"'"+inboxRequestVo.getParameterType()+"'";
		}
		if(null != inboxRequestVo.getParameterId() && !"".equalsIgnoreCase(inboxRequestVo.getParameterId())){
			queryString=queryString+" AND TASK.COMPONENT_ID = "+"'"+inboxRequestVo.getParameterId()+"'";
			if (NumberUtils.isCreatable(inboxRequestVo.getParameterId())) {
				queryString=queryString+" AND PLIST.PICK_LIST_ID = "+inboxRequestVo.getParameterId();
			}
		}
		queryString = queryString +PARAM_SEARCH2;
		if(null != inboxRequestVo.getUserRole() && !"".equalsIgnoreCase(inboxRequestVo.getUserRole())){
			queryString=queryString+" AND TASK.TASK_ROLE = "+"'"+inboxRequestVo.getUserRole()+"'";
		}
		if(!"ALL".equalsIgnoreCase(inboxRequestVo.getParameterType()) && !"".equalsIgnoreCase(inboxRequestVo.getParameterType()) && inboxRequestVo.getParameterType() != null){
		queryString = queryString +" AND TASK.WORK_ITEM_TYPE = "+"'"+inboxRequestVo.getParameterType()+"'";
		}
		if(null != inboxRequestVo.getParameterId() && !"".equalsIgnoreCase(inboxRequestVo.getParameterId())){
			queryString=queryString+" AND STA.SINGLE_TOUCH_ID = "+"'"+inboxRequestVo.getParameterId()+"'";
		}
		
		
		queryString = queryString +PARAM_SEARCH3;
		if(null != inboxRequestVo.getUserRole() && !"".equalsIgnoreCase(inboxRequestVo.getUserRole())){
			queryString=queryString+" AND TASK.TASK_ROLE = "+"'"+inboxRequestVo.getUserRole()+"'";
		}
		if(!"ALL".equalsIgnoreCase(inboxRequestVo.getParameterType()) && !"".equalsIgnoreCase(inboxRequestVo.getParameterType()) && inboxRequestVo.getParameterType() != null){
		queryString = queryString +" AND TASK.WORK_ITEM_TYPE = "+"'"+inboxRequestVo.getParameterType()+"'";
		}
		if(null != inboxRequestVo.getParameterId() && !"".equalsIgnoreCase(inboxRequestVo.getParameterId())){
			queryString=queryString+" AND STG.CONFIG_ID = "+"'"+inboxRequestVo.getParameterId()+"'";
		}
		
		
		query= (SQLQuery) getSession().createSQLQuery(queryString);

		//query=getAssignedUserTotal(inboxRequestVo,query,queryString);
		List<Object> paramList = query.list();
		for(Object obj :paramList)
		{ 
			InboxRequestVo paramvo = new InboxRequestVo();
		     Object [] array = (Object[]) obj;
		     if(null != array && array.length >5){
		    	 paramvo.setSelectBox(CommonUtility.getEmptyString((String)array[0]));
		    	 paramvo.setParameterId(CommonUtility.getEmptyString((String)array[1]));
		    	 paramvo.setParameterName(CommonUtility.getEmptyString((String)array[2]));
		    	 paramvo.setParameterType(CommonUtility.getEmptyString((String)array[3]));
		    	 paramvo.setStatus(CommonUtility.getEmptyString((String)array[4]));
		    	 paramvo.setCreatedBy(CommonUtility.getEmptyString((String)array[5]));
		    	 paramvo.setCreatedDt(CommonUtility.getEmptyString((String)array[6]));
		    	 paramvo.setUserId(CommonUtility.getEmptyString((String)array[7]));
		    	 paramvo.setAssigneeTO(CommonUtility.getEmptyString((String)array[8]));
		  }
		     paramVoList.add(paramvo);
	
		}
		return paramVoList;
	}
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.inbox.dao.IInboxDao#getParameterDetailsCount()
	 */
	@Override
	public int getParameterDetailsCount() {
		logger.info("Inside the Class: InboxDaoImpl ---> method: getAssignedTotalRecords ");
		SQLQuery query =null;
		query =(SQLQuery) getSession().createSQLQuery("SELECT (SELECT COUNT(1) FROM PICK_LIST_LKUP_STG PLIST,KYC_TASK TASK WHERE TASK.COMPONENT_ID  = CAST(PLIST.PICK_LIST_ID AS VARCHAR(20)) AND upper(TASK.WORK_ITEM_STATUS) IN (upper('READY')))+ (SELECT COUNT(*) as totalcount FROM CDD_SINGE_TOUCH_CONFIG_STG STA, KYC_TASK TASK  where TASK.COMPONENT_ID = STA.SINGLE_TOUCH_ID AND upper(TASK.WORK_ITEM_STATUS) IN (upper('READY'))) as totalcount from dual");
		BigDecimal bd = (BigDecimal) query.uniqueResult();
		Long count =  (Long)bd.longValue();
		return count.intValue();
	}
	@Override
	public List<BranchEntity> getCustBranchDetails(String selectedCustNumber) {
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(VALIDATE_CUST_BRANCH).addEntity(BranchEntity.class).setParameter("selectedCustomerNbr", selectedCustNumber);
		List<BranchEntity> branchList =query.list(); 
		return branchList;
	}
	@Override
	public List<String> getCustRelationshipOff(String selectedCustNumber) {
		SQLQuery query =(SQLQuery) getSession().createSQLQuery(GET_CUST_RELATIONSHIP_OFFICER).setParameter("selectedCustomerNbr", selectedCustNumber);
		List<String> relationshipOffList =query.list(); 
		return relationshipOffList;
	}
	
	
	@SuppressWarnings("unchecked")
	@Override
	public List<String> getParameterAssigneeInfo(List<String> pickListIdLst){
		Query query = getSession().createSQLQuery(ASSIGNEE_TO_LIST);
		query.setParameterList("paramIdLst", pickListIdLst);
		return query.list();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Map<String,String> getParameterAssigneeInfoUnClaim(List<String> pickListIdLst){
		Map<String,String> unClaimMap=new HashMap<String,String>();
		Query query = getSession().createSQLQuery(ASSIGNEE_TO_LIST_UNCLAIM);
		query.setParameterList("paramIdLst", pickListIdLst);
		List<Object[]> fetchVal=query.list();
		
		Iterator<Object[]> iterator = fetchVal.iterator();
		while (iterator.hasNext()) {
			Object[] obj = iterator.next();
			unClaimMap.put(obj[0] != null?obj[0].toString():"", obj[1] != null?obj[1].toString():"");
		}
		
		return unClaimMap;
	}
}
