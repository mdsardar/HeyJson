
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.citigroup.amlcdd.audittrail.service.ICddAuditLogService;
import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.common.constants.AuditLogActionEventEnum;
import com.citigroup.amlcdd.common.constants.NotificationEventsEnum;
import com.citigroup.amlcdd.common.constants.ScreenNameEnum;
import com.citigroup.amlcdd.entity.BranchEntity;
import com.citigroup.amlcdd.entity.EmailUserEntity;
import com.citigroup.amlcdd.entity.InboxEntity;
import com.citigroup.amlcdd.entity.InboxTotalEntity;
import com.citigroup.amlcdd.entity.UserDetailsEntity;
import com.citigroup.amlcdd.forms.questions.util.NonFormErrorMessageRenderUtil;
import com.citigroup.amlcdd.framework.exception.AmlCddException;
import com.citigroup.amlcdd.framework.notification.email.service.INotificationService;
import com.citigroup.amlcdd.framework.notification.email.vo.EmailNotificationVO;
import com.citigroup.amlcdd.framework.notification.email.vo.EmailUserVO;
import com.citigroup.amlcdd.framework.util.CommonUtility;
import com.citigroup.amlcdd.framework.vo.PickListLkUpVO;
import com.citigroup.amlcdd.framework.webapp.BaseController;
import com.citigroup.amlcdd.inbox.service.IInboxService;
import com.citigroup.amlcdd.inbox.vo.InboxHelper;
import com.citigroup.amlcdd.inbox.vo.InboxPostRequestVo;
import com.citigroup.amlcdd.inbox.vo.InboxRequestVo;
import com.citigroup.amlcdd.inbox.vo.InboxVo;
import com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService;
import com.citigroup.amlcdd.useradmin.service.IParamConfigUtilService;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant;
import com.citigroup.amlcdd.workflow.interfaces.IUserMaintenanceService;
import com.citigroup.amlcdd.workflow.interfaces.WorkflowServices;
import com.citigroup.amlcdd.workflow.vo.CustomerDetailsVO;
import com.citigroup.amlcdd.workflow.vo.UserMntnceWorkflowParamVo;
import com.citigroup.amlcdd.workflow.vo.WorkflowInboxAction;
import com.citigroup.amlcdd.workflow.vo.WorkflowParamsVO;

@Controller
@PropertySource(value = "classpath:common.properties")
@RequestMapping("/inbox")
public class InboxController extends BaseController {
	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(InboxController.class);
	@Autowired
	private IInboxService inboxService;

	@Autowired
	private WorkflowServices workflowServices;

	@Autowired
	private ICddAuditLogService cddAuditLogServiceImpl;

	@Autowired
	private NonFormErrorMessageRenderUtil nonFormErrorMessageRenderUtil;

	@Autowired
	private INotificationService iNotificationService;
	
	
	@Autowired
	private Environment environment;
	
	@Autowired
	private ICountryRiskOverrideService countryRiskOverrideService;
	
	@Autowired
	private IUserMaintenanceService userMaintenanceService;
	
	@Autowired
	private IParamConfigUtilService  paramConfigUtilService;
	
	@Value("${spring.profiles.active}")
	private String profileType;

	/**
	 * View the Inbox screen
	 * 
	 * @return
	 */
	@RequestMapping(value = "/init", method = RequestMethod.GET)
	public String initInbox(Map<String, Object> model) {
		String buildNo = environment.getRequiredProperty("build.number");
		String timestamp = environment.getRequiredProperty("build.date");
		String appEnvironment = environment.getRequiredProperty("amlcdd.env");
		String appName = environment.getRequiredProperty("application.name");
		String appVersionValue = environment.getRequiredProperty("application.version");
		String appVersion="";
		if(appVersionValue !=null){
			String 	appVersionArray[]=	appVersionValue.split(AMLCDDConstants.HYPHEN_STRING);
			appVersion=appVersionArray.length > 1?appVersionArray[0]:appVersionValue;
		}
		  
		/*String[] checkAppName = appName.split(AMLCDDConstants.HYPHEN_STRING);
		appName = profileType.equalsIgnoreCase(AMLCDDConstants.CN)?checkAppName[0].toString():appName; */
		String buildValue = appName!=null?appName.toUpperCase():""+AMLCDDConstants.HYPHEN_STRING+appVersion;
		model.put("buildNo", buildNo);
		model.put("timestamp", timestamp);
		model.put("env", appEnvironment);
		model.put("loggedInCntry", getUserCountry());
		model.put("build", buildValue);
		return "inbox";
	}

	/**
	 * Get The Cdd/Kyc Unassigned work item from Database.
	 * 
	 * @return
	 */
	@RequestMapping("/getUnAssigned")
	@ResponseBody
	public InboxVo getUnAssignedWorkItem(@RequestParam("pageNo") int pageNo, @RequestParam("tabValue") String tabValue,
			@RequestParam("unAssignedlineOfBusiness") String unAssignedlineOfBusiness,
			@RequestParam("unAssignedCustNo") String unAssignedCustNo) {
		logger.info("Inside the class: InboxController >>> Method: getUnAssignedWorkItem");
		InboxVo inboxVo = new InboxVo();
		InboxRequestVo inboxRequestVo = new InboxRequestVo();
		try {
			inboxRequestVo.setPageNo(pageNo);
			inboxRequestVo.setCountryCode(getUserContext().getKycCountryCode());
			inboxRequestVo.setBusinessLine(unAssignedlineOfBusiness);
			inboxRequestVo.setUserId(getUserContext().getUserId());
			inboxRequestVo.setRole(tabValue);
			if(null !=unAssignedCustNo){
				inboxRequestVo.setCustomerNo(unAssignedCustNo.trim());
			}
			String roCode = inboxService.getRoleCoe(getUserContext().getUserId());
			if ("OWN".equalsIgnoreCase(roCode)) {
				inboxVo.setIsRoCodeOwn("YES");
				List<InboxEntity> inboxEntityList = new ArrayList<InboxEntity>();
				inboxVo.setInboxEntity(inboxEntityList);
				return inboxVo;
			}
			if (AMLCDDConstants.MAKER.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.KYCMAKER);
			} else if (AMLCDDConstants.CHECKER.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.KYCCHECKER);
			} else if (AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.COMPLMAKER);
			}
			List<InboxEntity> inboxEntityList = inboxService.getUnAssignedDetails(inboxRequestVo, roCode);
			//if(inboxRequestVo.getPageNo() == 1){
				List<InboxTotalEntity> inboxTotalList = inboxService.getUnAssignedTotalRecords(inboxRequestVo, roCode);
				if (inboxTotalList != null) {
					Iterator iterator = inboxTotalList.iterator();
					while (iterator.hasNext()) {
						InboxTotalEntity inboxTotal = (InboxTotalEntity) iterator.next();
						inboxVo.setTotalCount(inboxTotal.getTotalRecords());
					}
				}
			//}
			inboxVo.setInboxEntity(inboxEntityList);
		} catch (Exception e) {
			logger.error("Exception in the method -->getUnAssignedWorkItem: " + e);
		}
		return inboxVo;
	}

	/**
	 * Get The Cdd/Kyc Assigned work item from Database.
	 * 
	 * @return
	 */
	@RequestMapping("/getAssigned")
	@ResponseBody
	public InboxVo getAssignedWorkItem(@RequestParam("pageNo") int pageNo, @RequestParam("tabValue") String tabValue,
			@RequestParam("assignedlineOfBusiness") String assignedlineOfBusiness,
			@RequestParam("assignedCustNo") String assignedCustNo) {
		logger.info("Inside the class: InboxController >>> Method: getAssignedWorkItem");
		InboxVo inboxVo = new InboxVo();
		InboxRequestVo inboxRequestVo = new InboxRequestVo();
		try {
			List<String> systemRoles= getUserContext().getSystemRoles();
			List<String> adminSystemRoles =Arrays.asList(AMLCDDConstants.ADMIN_ROLES);
			inboxRequestVo.setPageNo(pageNo);
			inboxRequestVo.setBusinessLine(assignedlineOfBusiness);
			inboxRequestVo.setCountryCode(getUserContext().getKycCountryCode());
			inboxRequestVo.setUserId(getUserContext().getUserId());
			inboxRequestVo.setRole(tabValue);
			inboxRequestVo.setWorkItemAssignee(getUserContext().getUserId());
			if(null != assignedCustNo){
				inboxRequestVo.setCustomerNo(assignedCustNo.trim());
			}
			inboxRequestVo.setIsAdmin(false);
			if (AMLCDDConstants.MAKER.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.KYCMAKER);
			} else if (AMLCDDConstants.CHECKER.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.KYCCHECKER);
			} else if (AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.COMPLMAKER);
			}
			Iterator sysIterator=adminSystemRoles.iterator();
			while(sysIterator.hasNext()){
				if(systemRoles.contains(sysIterator.next())){
					inboxRequestVo.setIsAdmin(true);
					break;
				}
			}
			List<InboxEntity> inboxEntityList = inboxService.getAssignedDetails(inboxRequestVo);
			//if(inboxRequestVo.getPageNo() == 1){
				List<InboxTotalEntity> inboxTotalList = inboxService.getAssignedTotalRecords(inboxRequestVo);
				if (inboxTotalList != null) {
					Iterator iterator = inboxTotalList.iterator();
					while (iterator.hasNext()) {
						InboxTotalEntity inboxTotal = (InboxTotalEntity) iterator.next();
						inboxVo.setTotalCount(inboxTotal.getTotalRecords());
					}
				}
			//}
			inboxVo.setInboxEntity(inboxEntityList);
		} catch (Exception e) {
			logger.error("Exception in the method -->getAssignedWorkItem: " + e);
		}

		return inboxVo;
	}
	
	/**
	 * 
	 * Method Name: getParameterWorkItem
	 * Description: Method to display pending parameters for checker approval
	 * @return InboxVo
	 * @param 
	 *
	 */
	@RequestMapping("/getParameterCount")
	@ResponseBody
	public int getParameterWorkItemCount(@RequestParam("pageNo") int pageNo,@RequestParam("tabValue") String tabValue, @RequestParam("paramType") String paramType, @RequestParam("paramId") String paramId, Map<String, Object> model){
		logger.info("Inside the class: InboxController >>> Method: getParameterWorkItem");
		List<InboxRequestVo> parameterList = null;
		InboxRequestVo inboxRequestVo = new InboxRequestVo();
		try{
			inboxRequestVo.setPageNo(pageNo);
			if("UNDEFINED".equalsIgnoreCase(paramType) || null == paramType || "null".equalsIgnoreCase(paramType))
				inboxRequestVo.setParameterType("");
			else{
				inboxRequestVo.setParameterType(paramType);
			}
			if("UNDEFINED".equalsIgnoreCase(paramId) || null == paramId)
				inboxRequestVo.setParameterId("");
			else{
				inboxRequestVo.setParameterId(paramId);
			}
			inboxRequestVo.setCountryCode(getUserContext().getKycCountryCode());
			inboxRequestVo.setUserId(getUserContext().getUserId());
			inboxRequestVo.setRole(tabValue);
			inboxRequestVo.setWorkItemAssignee(getUserContext().getUserId());
			if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(tabValue)){
				inboxRequestVo.setUserRole(WorkflowConstant.COMPLCHECKER);
			}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.KYCCHECKER);
			}
			parameterList = inboxService.getParameterDetails(inboxRequestVo);
		}catch(Exception e){
			logger.error("Exception in the method -->getParameterWorkItem: "+e);
		}
		return parameterList.size();
	}

	
	/**
	 * view Maker,Checker and Compliance.
	 */
	@RequestMapping(value = "/initMaker", method = RequestMethod.GET)
	public String viewMaker(Map<String, Object> model, @RequestParam("tabValue") String tabValue) {
		logger.info("Inside the class: InboxController >>> Method: viewMaker");
		try {
			String adminUserInd="NONADMIN";
			List<String> systemRoles= getUserContext().getSystemRoles();
			if(paramConfigUtilService.isAdminUser(systemRoles)){
				adminUserInd="ADMIN_USER";
			}
			
			InboxHelper inboxHelper = new InboxHelper();
			inboxHelper.getMakerModel(model, tabValue);
			model.put("inboxForm", new InboxEntity());
			model.put(AMLCDDConstants.INBOX_UILBL, super.getUiLabels(AMLCDDConstants.INBOX_UILABEL));
			Map<String, List<PickListLkUpVO>> pickListMap = super.getPickList(
					Arrays.asList(AMLCDDConstants.CDD_SEARCH_PICKLIST_VAL));
			model.put(AMLCDDConstants.CDD_SEARCH_PICKLST, pickListMap);
			
			List<PickListLkUpVO> pickList = super.getPickList(AMLCDDConstants.PARAM_TYPE);
			Map<String, List<PickListLkUpVO>> pickListMap1 = new  HashMap<String, List<PickListLkUpVO>>();
			String roCode = inboxService.getRoleCoe(getUserContext().getUserId());
			model.put("roCode", roCode);
			model.put("userIDVal", getUserContext().getUserId());
			model.put("adminValCheck", adminUserInd);
			pickListMap1.put("ParamType", pickList);
			model.put("paramTypeList", pickListMap1);
		} catch (Exception e) {
			logger.error("Exception in the method -->getAssignedWorkItem: " + e);
		}
		return "maker";
	}
	/**
	 * Load the Branch and All User From Picklist In Popup.
	 * 
	 * @param inboxRequestVo
	 * @return
	 */
	@PostMapping(value = "/loadBranch")
	@ResponseBody
	public List<BranchEntity> getBranchDetails(@RequestBody List<InboxRequestVo> inboxRequestVo,
			@RequestParam("tabValue") String tabValue) {
		String systemRole = "";
		if (AMLCDDConstants.MAKER.equalsIgnoreCase(tabValue)) {
			systemRole = AMLCDDConstants.KYCMAKER;
		} else if (AMLCDDConstants.CHECKER.equalsIgnoreCase(tabValue)) {
			systemRole = AMLCDDConstants.KYCCHECKER;
		} else if (AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(tabValue)) {
			systemRole = AMLCDDConstants.COMPLMAKER;
		}
		List<String> controlNbrList = new ArrayList();
		Iterator iterator = inboxRequestVo.iterator();
		while (iterator.hasNext()) {
			InboxRequestVo obj = (InboxRequestVo) iterator.next();
			if (null != obj) {
				controlNbrList.add(obj.getControlNo());
			}
		}
		BranchEntity brnAllUserObj = new BranchEntity();
		List<PickListLkUpVO> getAllUserPickList = super.getPickList(AMLCDDConstants.ALL_USERS);
		if (null != getAllUserPickList && !getAllUserPickList.isEmpty()) {
			brnAllUserObj.setBrnchCode(getAllUserPickList.get(0).getPickListType());
			brnAllUserObj.setBrnchDesc(getAllUserPickList.get(0).getPickListDesc());
		}
		BranchEntity selectObj = new BranchEntity();
		List<PickListLkUpVO> getSelectPickList = super.getPickList(AMLCDDConstants.PICKLIST_SELECT_DD);
		if (null != getSelectPickList && !getSelectPickList.isEmpty()) {
			selectObj.setBrnchCode(String.valueOf(getSelectPickList.get(0).getPickListId()));
			selectObj.setBrnchDesc(getSelectPickList.get(0).getPickListDesc());
		}
		List<BranchEntity> branchList = inboxService.getBranchDetails(controlNbrList,getUserContext().getUserId());
		int countForBusinessRole = inboxService.getCountForBusinessRole(systemRole);
		branchList.add(0, brnAllUserObj);
		// branchList.add(0,selectObj);
		/*
		 * if(countForBusinessRole > 0){ branchList.add(1,brnAllUserObj);
		 * branchList.add(0,selectObj); }else{ branchList.add(0,selectObj); }
		 */
		return branchList;
	}

	private Boolean getValidNonValidUser(String userId, List<InboxRequestVo> inboxRequestVo) {
		Boolean chkFlg = true;
		Iterator iterator = null;
		String relationshipOfficer = "";
		String roCode = inboxService.getRoleCoe(userId);
		List<String> controlNbrList = new ArrayList();
		iterator = inboxRequestVo.iterator();
		while (iterator.hasNext()) {
			InboxRequestVo obj = (InboxRequestVo) iterator.next();
			if (null != obj) {
				controlNbrList.add(obj.getControlNo());
			}
		}
		if (AMLCDDConstants.ROLE_SCOPE_ALL.equalsIgnoreCase(roCode)) {
			return chkFlg;
		} else if (AMLCDDConstants.ROLE_SCOPE_BRANCH.equalsIgnoreCase(roCode)) {
			List<BranchEntity> branchList = inboxService.getBranchDetails(controlNbrList,userId);
			if(null != branchList && !branchList.isEmpty()){
				List<String> mappedBranchForUserList = inboxService.getMappedBranchForUser(userId);
				if(null != mappedBranchForUserList && !mappedBranchForUserList.isEmpty()){
					iterator = branchList.iterator();
					while (iterator.hasNext()) {
						BranchEntity branchObj = (BranchEntity) iterator.next();
						if (!mappedBranchForUserList.contains(branchObj.getBrnchCode())) {
							chkFlg = false;
						}
					}
				}else{
					chkFlg = false;
				}
			}else{
				chkFlg = false;
			}
		} else if (AMLCDDConstants.ROLE_SCOPE_OWN.equalsIgnoreCase(roCode)) {
			List<String> relationOfficerList = inboxService.getRelationshipOff(controlNbrList,userId);
			if(null !=relationOfficerList && !relationOfficerList.isEmpty()){
				List<String> roCodeList = inboxService.getRoCode(userId);
				if(null !=roCodeList && !roCodeList.isEmpty()){
					iterator = relationOfficerList.iterator();
					while (iterator.hasNext()) {
						relationshipOfficer = (String) iterator.next();
						if (!roCodeList.contains(relationshipOfficer)) {
							chkFlg = false;
						}
					}
				}else{
					chkFlg = false;
				}
			}else{
				chkFlg = false;
			}
		}
		return chkFlg;
	}
	private AuditLogActionEventEnum getActionEvent(String systemRole,String userRole){
		AuditLogActionEventEnum auditLogActionEventEnum = null;
		if (AMLCDDConstants.MAKER.equalsIgnoreCase(systemRole)) {
			if(AMLCDDConstants.ASSIGN.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_MAKER_ASSIGN;
			}else if(AMLCDDConstants.REASSIGN.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_MAKER_REASSIGN;
			}else if(AMLCDDConstants.CLIAM.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_MAKER_CLAIM;
			}else if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_MAKER_UNCLAIM;
			}
			
		} else if (AMLCDDConstants.CHECKER.equalsIgnoreCase(systemRole)) {
			if(AMLCDDConstants.ASSIGN.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_CHECKER_ASSIGN;
			}else if(AMLCDDConstants.REASSIGN.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_CHECKER_REASSIGN;
			}else if(AMLCDDConstants.CLIAM.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_CHECKER_CLAIM;
			}else if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_CHECKER_UNCLAIM;
			}
			
		} else if (AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(systemRole)) {
			if(AMLCDDConstants.ASSIGN.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_COMPLIANCE_CLAIM;
			}else if(AMLCDDConstants.REASSIGN.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_COMPLIANCE_REASSIGN;
			}else if(AMLCDDConstants.CLIAM.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_COMPLIANCE_CLAIM;
			}else if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(userRole)){
				auditLogActionEventEnum = AuditLogActionEventEnum.INBOX_COMPLIANCE_UNCLAIM;
			}
		}
		return auditLogActionEventEnum; 
	}

	/**
	 * Post the user
	 */
	@RequestMapping(value = "/postUser", method = RequestMethod.POST)
	@ResponseBody
	public InboxRequestVo assignRecords(@RequestBody InboxPostRequestVo inboxPostRequestVo) {
		    InboxRequestVo inboxVo = new InboxRequestVo();
		    boolean isFailureWrkFloFlg = false;
			boolean isSuccessWrkFlg = false;
			Boolean isWorkflowFlg = true;
			StringBuilder successCdd = new StringBuilder();
			StringBuilder failureCdd = new StringBuilder();
			StringBuilder totalClaimCdd = new StringBuilder();
			try {
				if (AMLCDDConstants.ASSIGN.equalsIgnoreCase(inboxPostRequestVo.getAssign()) || AMLCDDConstants.REASSIGN.equalsIgnoreCase(inboxPostRequestVo.getAssign())) {
					List<InboxRequestVo> validateUserInboxRequestVo =inboxPostRequestVo.getInboxRequestVo();
					if(inboxPostRequestVo.getUserId().equalsIgnoreCase(AMLCDDConstants.COMMON_SELECT_VAL) || "".equalsIgnoreCase(inboxPostRequestVo.getUserId()) || null == inboxPostRequestVo.getUserId()){
						inboxVo.setWorkFlowFailureMessage("Please Select Valid User");
						inboxVo.setIsValidUser(false);
						return inboxVo;
					}
					if(null != validateUserInboxRequestVo && !validateUserInboxRequestVo.isEmpty()){
						if(validateUserInboxRequestVo.stream().filter(assignedUser -> inboxPostRequestVo.getUserId().equals(assignedUser.getCddCurrentlyAssignedUser())).collect(Collectors.toList()).size() >0){
							inboxVo.setWorkFlowFailureMessage("Cannot Assign CDD to the Same User:"+inboxPostRequestVo.getUserId());
							inboxVo.setIsValidUser(false);
							return inboxVo;
						}
					}
					
					Boolean validFlg = getValidNonValidUser(inboxPostRequestVo.getUserId(), inboxPostRequestVo.getInboxRequestVo());
					if (validFlg == false) {
						inboxVo.setWorkFlowMessage(super.getScreenErrorMessage("NOT_AUTHORIZE_TO_ASSIGN_REASSIGN")+" : "+ inboxPostRequestVo.getUserId());
						inboxVo.setIsValidUser(false);
						return inboxVo;
					}
				}
				WorkflowParamsVO workflowParamsVO = new WorkflowParamsVO();
				if (AMLCDDConstants.MAKER.equalsIgnoreCase(inboxPostRequestVo.getSystemRole())) {
					workflowParamsVO.setUserRole(WorkflowConstant.KYCMAKER);
				} else if (AMLCDDConstants.CHECKER.equalsIgnoreCase(inboxPostRequestVo.getSystemRole())) {
					workflowParamsVO.setUserRole(WorkflowConstant.KYCCHECKER);
				} else if (AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(inboxPostRequestVo.getSystemRole())) {
					workflowParamsVO.setUserRole(WorkflowConstant.COMPLMAKER);
				}
				CustomerDetailsVO customerDetailsVO = new CustomerDetailsVO();
				logger.info("Inside the class: InboxController >>> Method: assignRecords");
				Iterator iterator = inboxPostRequestVo.getInboxRequestVo().iterator();
				if (AMLCDDConstants.ASSIGN.equalsIgnoreCase(inboxPostRequestVo.getAssign())) {
					successCdd.append(
							super.getScreenErrorMessage("INBOX_ASIGN_SUCCESS")
									+ "  : ");
					failureCdd.append(
							"\n" + super.getScreenErrorMessage("INBOX_ASIGN_FAILURE")
									+ "  : ");
					while (iterator.hasNext()) {
						inboxVo = (InboxRequestVo) iterator.next();
						customerDetailsVO.setCustNumber(inboxVo.getCustomerNo());
						customerDetailsVO.setControlNumber(inboxVo.getControlNo());
						customerDetailsVO.setCountryCode(getUserContext().getKycCountryCode());
						workflowParamsVO.setCustomerDetailsVO(customerDetailsVO);
						workflowParamsVO.setAssignee(inboxPostRequestVo.getUserId());
						workflowParamsVO.setAssigner(getUserContext().getUserId());
						workflowParamsVO.setUserId(getUserContext().getUserId());
						isWorkflowFlg = workflowServices.doInboxOperation(workflowParamsVO, WorkflowInboxAction.ASSIGN);
						if (isWorkflowFlg == true) {
							isSuccessWrkFlg = true;
							successCdd.append(inboxVo.getControlNo() + ",");
						} else {
							isFailureWrkFloFlg = true;
							failureCdd.append(inboxVo.getControlNo() + ",");
						}
						inboxVo.setActionDoneByUser(getUserContext().getUserId());
						inboxVo.setActionDoneByRole(getUserContext().getRoleId());
						inboxVo.setFormName(ScreenNameEnum.INBOX);
						
						inboxVo.setActionEvent(getActionEvent(inboxPostRequestVo.getSystemRole(),inboxPostRequestVo.getAssign()));
						inboxVo.setCountry(getUserContext().getKycCountryCode());
						inboxVo.setCustNumber(inboxVo.getCustomerNo());
						inboxVo.setCddControlNumber(inboxVo.getControlNo());
						inboxVo.setCddStatus(inboxVo.getCddStatus());
						inboxVo.setActionComments(inboxPostRequestVo.getComment());
						inboxService.saveAuditLog(inboxVo);
						
						  if(null != isWorkflowFlg && isWorkflowFlg == true){
						EmailNotificationVO emailNotificationVO = new EmailNotificationVO();
						emailNotificationVO.setCddNumber(inboxVo.getControlNo());
						emailNotificationVO.setCustomerNbr(inboxVo.getCustomerNo());
						emailNotificationVO.setCountryCode(getUserContext().getKycCountryCode());
							EmailUserVO assignerEmailId = inboxService
									.getEmailIdForUser(getUserContext().getUserId());
							emailNotificationVO.setAssignorEmailID(assignerEmailId.getEmail());
							EmailUserVO assigneeEmailId = inboxService
									.getEmailIdForUser(inboxPostRequestVo.getUserId());
							emailNotificationVO.setAssigneeName(assigneeEmailId.getName());
							emailNotificationVO.setAssigneeEmailID(assigneeEmailId.getEmail());
							emailNotificationVO.setAssignorSOEID(getUserContext().getUserId());
							emailNotificationVO.setAssigneeSOEID(inboxPostRequestVo.getUserId());
							emailNotificationVO.setAssignorName(assignerEmailId.getName());
							emailNotificationVO.setEventType(NotificationEventsEnum.REASSIGN_CDD.toString());
						iNotificationService.sendNotifiation(emailNotificationVO); 
						}
						 
					}
					successCdd.deleteCharAt(successCdd.length() - 1);
					totalClaimCdd.append(successCdd);
					if (isFailureWrkFloFlg == true) {
						totalClaimCdd.append(successCdd + " " + failureCdd);
					}
					inboxVo.setWorkFlowMessage(totalClaimCdd.toString());
				} else if (AMLCDDConstants.REASSIGN.equalsIgnoreCase(inboxPostRequestVo.getAssign())) {
					successCdd.append(
							super.getScreenErrorMessage("INBOX_REASIGN_SUCCESS")
									+ "  : ");
					failureCdd.append("\n"
							+ super.getScreenErrorMessage("INBOX_REASIGN_FAILURE")
							+ "  : ");
					while (iterator.hasNext()) {
						inboxVo = (InboxRequestVo) iterator.next();
						customerDetailsVO.setCustNumber(inboxVo.getCustomerNo());
						customerDetailsVO.setControlNumber(inboxVo.getControlNo());
						customerDetailsVO.setCountryCode(getUserContext().getKycCountryCode());
						workflowParamsVO.setCustomerDetailsVO(customerDetailsVO);
						workflowParamsVO.setAssignee(inboxPostRequestVo.getUserId());
						workflowParamsVO.setAssigner(getUserContext().getUserId());
						workflowParamsVO.setUserId(inboxVo.getCddCurrentlyAssignedUser());
						isWorkflowFlg = workflowServices.doInboxOperation(workflowParamsVO, WorkflowInboxAction.REASSIGN);
						if (isWorkflowFlg == true) {
							isSuccessWrkFlg = true;
							successCdd.append(inboxVo.getControlNo() + ",");
						} else {
							isFailureWrkFloFlg = true;
							failureCdd.append(inboxVo.getControlNo() + ",");
						}
						inboxVo.setActionDoneByUser(getUserContext().getUserId());
						inboxVo.setActionDoneByRole(getUserContext().getRoleId());
						inboxVo.setFormName(ScreenNameEnum.INBOX);
						inboxVo.setActionEvent(getActionEvent(inboxPostRequestVo.getSystemRole(),inboxPostRequestVo.getAssign()));
						inboxVo.setCountry(getUserContext().getKycCountryCode());
						inboxVo.setCustNumber(inboxVo.getCustomerNo());
						inboxVo.setCddControlNumber(inboxVo.getControlNo());
						inboxVo.setCddStatus(inboxVo.getCddStatus());
						inboxVo.setActionComments(inboxPostRequestVo.getComment());
						inboxService.saveAuditLog(inboxVo);
						
						  if(null != isWorkflowFlg && isWorkflowFlg == true){
							  EmailNotificationVO emailNotificationVO = new EmailNotificationVO();
							emailNotificationVO.setCddNumber(inboxVo.getControlNo());
							emailNotificationVO.setCustomerNbr(inboxVo.getCustomerNo());
							emailNotificationVO.setCountryCode(getUserContext().getKycCountryCode());
								EmailUserVO assignerEmailId = inboxService.getEmailIdForUser(getUserContext().getUserId());
								emailNotificationVO.setAssignorEmailID(assignerEmailId.getEmail());
								EmailUserVO assigneeEmailId = inboxService.getEmailIdForUser(inboxPostRequestVo.getUserId());
								emailNotificationVO.setAssigneeEmailID(assigneeEmailId.getEmail());
								emailNotificationVO.setAssigneeName(assigneeEmailId.getName());
								emailNotificationVO.setAssignorSOEID(getUserContext().getUserId());
								emailNotificationVO.setAssigneeSOEID(inboxPostRequestVo.getUserId());
								emailNotificationVO.setAssignorName(assignerEmailId.getName());
								emailNotificationVO.setEventType(NotificationEventsEnum.REASSIGN_CDD.toString());
							iNotificationService.sendNotifiation(emailNotificationVO); 
							}
						 
					}
					successCdd.deleteCharAt(successCdd.length() - 1);
					totalClaimCdd.append(successCdd);
					if (isFailureWrkFloFlg == true) {
						totalClaimCdd.append(successCdd + " " + failureCdd);
					}
					inboxVo.setWorkFlowMessage(totalClaimCdd.toString());
				} else if (AMLCDDConstants.CLIAM.equalsIgnoreCase(inboxPostRequestVo.getAssign())) {
					successCdd.append(
							super.getScreenErrorMessage("INBOX_CLAIM_SUCCESS")
									+ "  : ");
					failureCdd.append(
							"\n" + super.getScreenErrorMessage("INBOX_CLAIM_FAILURE")
									+ "  : ");
					while (iterator.hasNext()) {
						inboxVo = (InboxRequestVo) iterator.next();
						customerDetailsVO.setCustNumber(inboxVo.getCustomerNo());
						customerDetailsVO.setControlNumber(inboxVo.getControlNo());
						customerDetailsVO.setCountryCode(getUserContext().getKycCountryCode());
						workflowParamsVO.setCustomerDetailsVO(customerDetailsVO);
						workflowParamsVO.setAssignee(getUserContext().getUserId());
						workflowParamsVO.setUserId(getUserContext().getUserId());
						isWorkflowFlg = workflowServices.doInboxOperation(workflowParamsVO, WorkflowInboxAction.CLAIM);
						if (isWorkflowFlg == true) {
							isSuccessWrkFlg = true;
							successCdd.append(inboxVo.getControlNo() + ",");
						} else {
							isFailureWrkFloFlg = true;
							failureCdd.append(inboxVo.getControlNo() + ",");
						}
						inboxVo.setActionDoneByUser(getUserContext().getUserId());
						inboxVo.setActionDoneByRole(getUserContext().getRoleId());
						inboxVo.setFormName(ScreenNameEnum.INBOX);
						inboxVo.setActionEvent(getActionEvent(inboxPostRequestVo.getSystemRole(),inboxPostRequestVo.getAssign()));
						inboxVo.setCountry(getUserContext().getKycCountryCode());
						inboxVo.setCustNumber(inboxVo.getCustomerNo());
						inboxVo.setCddControlNumber(inboxVo.getControlNo());
						inboxVo.setCddStatus(inboxVo.getCddStatus());
						inboxService.saveAuditLog(inboxVo);
					}
					successCdd.deleteCharAt(successCdd.length() - 1);
					totalClaimCdd.append(successCdd);
					if (isFailureWrkFloFlg == true) {
						totalClaimCdd.append(successCdd + " " + failureCdd);
					}
					inboxVo.setWorkFlowMessage(totalClaimCdd.toString());
				} else if (AMLCDDConstants.UNCLAIM.equalsIgnoreCase(inboxPostRequestVo.getAssign())) {
					successCdd.append(
							super.getScreenErrorMessage("INBOX_UNCLAIM_SUCCESS")
									+ "  : ");
					failureCdd.append("\n"
							+ super.getScreenErrorMessage("INBOX_UNCLAIM_FAILURE")
							+ "  : ");
					while (iterator.hasNext()) {
						inboxVo = (InboxRequestVo) iterator.next();
						customerDetailsVO.setCustNumber(inboxVo.getCustomerNo());
						customerDetailsVO.setControlNumber(inboxVo.getControlNo());
						customerDetailsVO.setCountryCode(getUserContext().getKycCountryCode());
						workflowParamsVO.setCustomerDetailsVO(customerDetailsVO);
						workflowParamsVO.setUserId(inboxVo.getCddCurrentlyAssignedUser());
						isWorkflowFlg = workflowServices.doInboxOperation(workflowParamsVO, WorkflowInboxAction.UNCLAIM);
						if (isWorkflowFlg == true) {
							successCdd.append(inboxVo.getControlNo() + ",");
						} else {
							isFailureWrkFloFlg = true;
							failureCdd.append(inboxVo.getControlNo() + ",");
						}
						inboxVo.setActionDoneByUser(getUserContext().getUserId());
						inboxVo.setActionDoneByRole(getUserContext().getRoleId());
						inboxVo.setFormName(ScreenNameEnum.INBOX);
						inboxVo.setActionEvent(getActionEvent(inboxPostRequestVo.getSystemRole(),inboxPostRequestVo.getAssign()));
						inboxVo.setCountry(getUserContext().getKycCountryCode());
						inboxVo.setCustNumber(inboxVo.getCustomerNo());
						inboxVo.setCddControlNumber(inboxVo.getControlNo());
						inboxVo.setCddStatus(inboxVo.getCddStatus());
						inboxService.saveAuditLog(inboxVo);
					}
					successCdd.deleteCharAt(successCdd.length() - 1);
					totalClaimCdd.append(successCdd);
					if (isFailureWrkFloFlg == true) {
						totalClaimCdd.append(successCdd + " " + failureCdd);
					}
					inboxVo.setWorkFlowMessage(totalClaimCdd.toString());
				}
			} catch (AmlCddException e) {
				if(null != e.getExceptionDetails() && !"".equals(e.getExceptionDetails().getExceptionCode())){
                    inboxVo.setWorkFlowFailureMessage(super.getScreenErrorMessage(e.getExceptionDetails().getExceptionCode()));
	             }else{
	            	 	logger.info("Exception in workflow: "+e.getMessage());
	                    inboxVo.setWorkFlowFailureMessage("Inbox Operation Failed.");
	             }
			}
			
		return inboxVo;
	}

	/**
	 * Get The users based on the selected branch in Assig to user popup window
	 * 
	 * @param branchCode
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getUsers", method = RequestMethod.POST)
	public List<UserDetailsEntity> getUserDetails(@RequestBody List<InboxRequestVo> nboxRequestVo,
												  @RequestParam("branchCode") String branchCode,
												  @RequestParam("tabValue") String tabValue) {
		List<String> businessRoleList = new ArrayList();
		if (AMLCDDConstants.MAKER.equalsIgnoreCase(tabValue)) {
			businessRoleList.add(AMLCDDConstants.KYCMAKER);
		} else if (AMLCDDConstants.CHECKER.equalsIgnoreCase(tabValue)) {
			businessRoleList.add(AMLCDDConstants.KYCCHECKER);
		} else if (AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(tabValue)) {
			businessRoleList.add(AMLCDDConstants.COMPLMAKER);
			businessRoleList.add(AMLCDDConstants.COMPLCHECKER);
		}
		List<UserDetailsEntity> userList = new ArrayList<>();
		UserDetailsEntity userDetailsEntity = new UserDetailsEntity();
		List<PickListLkUpVO> selectPicklist = super.getPickList(AMLCDDConstants.PICKLIST_SELECT_DD);
		if (null != selectPicklist && !selectPicklist.isEmpty()) {
			userDetailsEntity.setUserId(String.valueOf(selectPicklist.get(0).getCode()));
			userDetailsEntity.setUserName(selectPicklist.get(0).getPickListDesc());
		}
		try {
			List<String> controlNbrList = new ArrayList();
			Iterator iterator = nboxRequestVo.iterator();
			while (iterator.hasNext()) {
				InboxRequestVo obj = (InboxRequestVo) iterator.next();
				if (null != obj) {
					controlNbrList.add(obj.getControlNo());
				}
			}
			if (AMLCDDConstants.ALL_USERS.equalsIgnoreCase(branchCode)) {
				userList = inboxService.getAllUsersForInbox(businessRoleList,getUserContext().getUserId(),controlNbrList);
				userList.add(0, userDetailsEntity);
			} else {
				userList = inboxService.getUsrDetails(branchCode,businessRoleList,getUserContext().getUserId());
				userList.add(0, userDetailsEntity);
			}
			List<String> systemRoles= getUserContext().getSystemRoles();
			List<String> adminSystemRoles =Arrays.asList(AMLCDDConstants.ADMIN_ROLES);
			Iterator<String> sysIterator=adminSystemRoles.iterator();
			while(sysIterator.hasNext()){
				if(systemRoles.contains(sysIterator.next())){
					UserDetailsEntity adminUserDetails = new UserDetailsEntity();
					adminUserDetails.setUserId(getUserContext().getUserId());
					adminUserDetails.setUserName(getUserContext().getUserId()+"-"+getUserContext().getUserName());
					userList.add(adminUserDetails);
					break;
				}
			}
		} catch (Exception e) {
			logger.error("Exception in the method -->getAssignedWorkItem: " + e);
		}
		return userList;
	}

	/**
	 * Get the Branch
	 * 
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getBranch", method = RequestMethod.GET)
	public List<BranchEntity> getBranch() {
		try {
			return inboxService.getBranchDetails();
		} catch (Exception e) {
			logger.error("Exception in the method -->getAssignedWorkItem: " + e);
		}
		return null;
	}

	@ResponseBody
	@RequestMapping(value = "/getAssignUnAssignUsers", method = RequestMethod.GET)
	public List<EmailUserEntity> getAssignUnAssignUsersDetails(@RequestParam("roleId") String roleId,
			@RequestParam("customerNumber") String customerId) {
		try {
			return inboxService.getAssignAndResignUserDetails(roleId, customerId);
		} catch (Exception e) {
			logger.error("Exception in the method -->getAssignUnAssignUsersDetails: " + e);
		}
		return null;
	}
	
	
	@RequestMapping(value = "/paramClaimAndUnClaim",method = RequestMethod.POST)
	@ResponseBody
	public InboxRequestVo getParameterClaimAndUnClaimRecords(@RequestBody List<InboxRequestVo> nboxRequestVo,
			@RequestParam("userId") String userId, @RequestParam("assign") String assign,
			@RequestParam("systemRole") String systemRole) {
		logger.info("Inside the class: InboxController >>> Method: parameterClaimAndUnClaimRecords");
		InboxRequestVo inboxRequestVo = new InboxRequestVo();
		try {
		inboxRequestVo.setCountryCode(getUserContext().getKycCountryCode());
		inboxRequestVo.setUserId(getUserContext().getUserId());
		inboxRequestVo.setRole(systemRole);
		inboxRequestVo.setWorkItemAssignee(getUserContext().getUserId());
		List<String> successParameterIdList = new ArrayList<String>();
		List<String> parameterList = new ArrayList<String>();
		List<String> assignParameterIdList = new ArrayList<String>();
		String adminUserInd="NONADMIN";
		List<String> systemRoles= getUserContext().getSystemRoles();
		
		if(paramConfigUtilService.isAdminUser(systemRoles)){
			adminUserInd="ADMIN_USER";
		}
		
		
		for(InboxRequestVo inboxRequestinfo:nboxRequestVo){
			parameterList.add(inboxRequestinfo.getParameterId());
		}
		if(AMLCDDConstants.CLIAM.equalsIgnoreCase(assign)){
			if(parameterList.size() >0){
				assignParameterIdList=inboxService.getParameterAssigneeInfo(parameterList);
			}
		}
		Map<String,String> unClaimMap=new HashMap<String,String>();
		if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(assign)){
			if(parameterList.size() >0){
				unClaimMap=inboxService.getParameterAssigneeInfoUnClaim(parameterList);
			}
		}
		
		for(InboxRequestVo inboxRequest:nboxRequestVo){
			UserMntnceWorkflowParamVo userMntnceWorkflowParamVo = new UserMntnceWorkflowParamVo();
	       
			if(AMLCDDConstants.CLIAM.equalsIgnoreCase(assign)){
				 userMntnceWorkflowParamVo.setUserId(getUserContext().getUserId());
				if(assignParameterIdList.contains(inboxRequest.getParameterId())){
					continue;
				}
			}
			if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(assign)){
				if("ADMIN_USER".equalsIgnoreCase(adminUserInd) && unClaimMap.size() >0){
					userMntnceWorkflowParamVo.setUserId(unClaimMap.get(inboxRequest.getParameterId()) !=null?unClaimMap.get(inboxRequest.getParameterId()):getUserContext().getUserId());
				}else{
					userMntnceWorkflowParamVo.setUserId(getUserContext().getUserId());
				}
				if(adminUserInd !="ADMIN_USER"  && unClaimMap.size() >0 
						&& unClaimMap.get(inboxRequest.getParameterId()) !=null 
						&& !(getUserContext().getUserId().equalsIgnoreCase(unClaimMap.get(inboxRequest.getParameterId()))) ){
					continue;
				}
			}
			boolean claimUnClaimFlag=false;
			
	        if(null != inboxRequest.getParameterId()){
	        	userMntnceWorkflowParamVo.setRequestNbr(inboxRequest.getParameterId());
	        }
	        	userMntnceWorkflowParamVo.setAssignee(getUserContext().getUserId());
	        if(systemRoles !=null && systemRoles.contains(AMLCDDConstants.COMPLCHECKER)){
	        	userMntnceWorkflowParamVo.setSystemRole(AMLCDDConstants.COMPLCHECKER);
	    	}else if(systemRoles !=null && systemRoles.contains(AMLCDDConstants.KYCCHECKER)){
	    		userMntnceWorkflowParamVo.setSystemRole(AMLCDDConstants.KYCCHECKER);
	    	}	
	        if(AMLCDDConstants.TRIGGER_REFRESH.equalsIgnoreCase(inboxRequest.getParameterType())){
	        	userMntnceWorkflowParamVo.setWorkItemType(WorkflowConstant.ConfigType.TRIGGER_REFRESH);
	        }else if(AMLCDDConstants.COUNTRY_OVERRIDE.equalsIgnoreCase(inboxRequest.getParameterType())){
	        	userMntnceWorkflowParamVo.setWorkItemType(WorkflowConstant.ConfigType.COUNTRY_OVERRIDE);
	        }else if(AMLCDDConstants.WORKFLOW_CONFIG.equalsIgnoreCase(inboxRequest.getParameterType())){
	        	userMntnceWorkflowParamVo.setWorkItemType(WorkflowConstant.ConfigType.WORKFLOW_CONFIG);
	        }
	        
	        if(AMLCDDConstants.CLIAM.equalsIgnoreCase(assign)){
	        	claimUnClaimFlag=userMaintenanceService.doUserAction(userMntnceWorkflowParamVo, WorkflowConstant.UserMntnceUserAction.CLAIM);
	        }else if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(assign)){
	        	claimUnClaimFlag=userMaintenanceService.doUserAction(userMntnceWorkflowParamVo, WorkflowConstant.UserMntnceUserAction.UNCLAIM);
	    	}
	        
	        if(claimUnClaimFlag){
	        	successParameterIdList.add(inboxRequest.getParameterId());
	        }
			
		}
		StringBuilder successParams = new StringBuilder();
		List<String> parameterIdList = new ArrayList<>();
		for(InboxRequestVo inboxRequest:nboxRequestVo){
			if(successParameterIdList.contains(inboxRequest.getParameterId())){
				if(successParams.length()>0){
					successParams.append(" , "+inboxRequest.getParameterId());
				}else{
					successParams.append(inboxRequest.getParameterId());
				}
				
			}
		}
		 if(AMLCDDConstants.CLIAM.equalsIgnoreCase(assign)){
			 	inboxRequestVo.setWorkFlowMessage("Parameter Work Items Successfully Claimed :"+successParams.toString());
		 }else if(AMLCDDConstants.UNCLAIM.equalsIgnoreCase(assign)){
			 	inboxRequestVo.setWorkFlowMessage("Parameter Work Items Successfully UnClaimed :"+successParams.toString());
		 }
		} catch (AmlCddException e) {
			if(null != e.getExceptionDetails() && !"".equals(e.getExceptionDetails().getExceptionCode())){
				inboxRequestVo.setWorkFlowFailureMessage(super.getScreenErrorMessage(e.getExceptionDetails().getExceptionCode()));
             }else{
            	 	logger.info("Exception in workflow: "+e.getMessage());
            	 	inboxRequestVo.setWorkFlowFailureMessage("Inbox Operation Failed.");
             }
		}  
		return inboxRequestVo;
	}
	/**
	 * 
	 * Method Name: getParameterWorkItem
	 * Description: Method to display pending parameters for checker approval
	 * @return InboxVo
	 * @param 
	 *
	 */
	@RequestMapping("/getParameter")
	@ResponseBody
	public List<InboxRequestVo> getParameterWorkItem(@RequestParam("pageNo") int pageNo,@RequestParam("tabValue") String tabValue,
			@RequestParam("paramType") String paramType, @RequestParam("paramId") String paramId, Map<String, Object> model){
		logger.info("Inside the class: InboxController >>> Method: getParameterWorkItem"+paramType);
		Map<String, String> userMap = countryRiskOverrideService.getAllUsers();
		InboxVo inboxVo = new InboxVo();
		Integer pageSize = Integer.valueOf(amlCddCacheUtil.getAppConfig(AMLCDDConstants.PAGE_COUNT));
		Integer pageNumber = pageNo;
		Integer fromIndex = null;
		List<InboxRequestVo> parameterList = null;
		List<InboxRequestVo> paramList = new ArrayList<>();;
		//ModelAndView mav = new ModelAndView("");
		InboxRequestVo inboxRequestVo = new InboxRequestVo();
		try{
			inboxRequestVo.setPageNo(pageNo);
			if("UNDEFINED".equalsIgnoreCase(paramType) || null == paramType || "null".equalsIgnoreCase(paramType))
				inboxRequestVo.setParameterType("");
			else{
				inboxRequestVo.setParameterType(paramType);
			}
			if("UNDEFINED".equalsIgnoreCase(paramId) || null == paramId)
				inboxRequestVo.setParameterId("");
			else{
				inboxRequestVo.setParameterId(paramId);
			}
			inboxRequestVo.setCountryCode(getUserContext().getKycCountryCode());
			inboxRequestVo.setUserId(getUserContext().getUserId());
			inboxRequestVo.setRole(tabValue);
			inboxRequestVo.setWorkItemAssignee(getUserContext().getUserId());
			if(AMLCDDConstants.COMPLIANCE.equalsIgnoreCase(tabValue)){
				inboxRequestVo.setUserRole(WorkflowConstant.COMPLCHECKER);
			}else if(AMLCDDConstants.CHECKER.equalsIgnoreCase(tabValue)) {
				inboxRequestVo.setUserRole(WorkflowConstant.KYCCHECKER);
			}
			Map<String, String> paramNameDescrptionPickmap =new HashMap<String, String>();
			List<PickListLkUpVO> paramNameDescrptionPickList = super.getPickList(AMLCDDConstants.PARAM_SCRN_INBOX_LBL);
			if(paramNameDescrptionPickList !=null){
			 paramNameDescrptionPickmap = paramNameDescrptionPickList.stream().collect(
	                Collectors.toMap(PickListLkUpVO::getCode, PickListLkUpVO::getPickListDesc));
			}
			//List<PickListLkUpVO> errorMsgPickList = super.getPickList(AMLCDDConstants.ERROR_MSG_CONFIG);
			parameterList = inboxService.getParameterDetails(inboxRequestVo);
			for(InboxRequestVo inboxReqVo :parameterList){
				if(paramNameDescrptionPickmap.size() > 0){
					inboxReqVo.setParamDesc(paramNameDescrptionPickmap.get(inboxReqVo.getParameterName()) != null?paramNameDescrptionPickmap.get(inboxReqVo.getParameterName()):inboxReqVo.getParameterName());
				}else{
					inboxReqVo.setParamDesc(inboxReqVo.getParameterName());
				}
				 if(CommonUtility.isNotNull(userMap.get(inboxReqVo.getCreatedBy()))){
						inboxReqVo.setMaker(inboxReqVo.getCreatedBy());
						inboxReqVo.setCreatedBy(userMap.get(inboxReqVo.getCreatedBy()));
					}
						else{
							inboxReqVo.setMaker(inboxReqVo.getCreatedBy());
							inboxReqVo.setCreatedBy(inboxReqVo.getCreatedBy());
						}
				paramList.add(inboxReqVo);
			}
			 fromIndex = (pageNumber - 1) * pageSize;
			    if(paramList == null || paramList.size() < fromIndex){
			        return Collections.emptyList();
			    }
			model.put("parameterList",  paramList.subList(fromIndex, Math.min(fromIndex + pageSize, paramList.size())));
			
		}catch(Exception e){
			logger.error("Exception in the method -->getParameterWorkItem: "+e);
		}

		return paramList.subList(fromIndex, Math.min(fromIndex + pageSize, paramList.size()));
	}
	
	/**
	 * This method is used to get The Page Count
	 */
	@GetMapping("/getPageCnt")
	@ResponseBody
	public int getPageCountDatatable(){
		int pageCount =super.getPageCountForDataTable();
		return pageCount;
	}
}
